plugins {
    id("kotlin-multiplatform")
    id("maven-publish")
    id("signing")
    id("com.github.johnrengelman.shadow") version("4.0.3")
}

kotlin {
    jvm() {
        compilations.all {
            kotlinOptions {
                jvmTarget = '1.8'
            }
        }

        mavenPublication {
            group = Configurations.groupId
            version = Configurations.cleanArchCoreVersion
        }
    }

    js() {
        mavenPublication {
            group = Configurations.groupId
            version = Configurations.cleanArchCoreVersion
        }
    }
    // For ARM, should be changed to iosArm32 or iosArm64
    // For Linux, should be changed to e.g. linuxX64
    // For MacOS, should be changed to e.g. macosX64
    // For Windows, should be changed to e.g. mingwX64
    macosX64() {
        mavenPublication {
            group = Configurations.groupId
            version = Configurations.cleanArchCoreVersion
        }
    }

    iosArm64() {
        mavenPublication {
            group = Configurations.groupId
            version = Configurations.cleanArchCoreVersion
        }
        
        binaries {
            framework {
            }
        }
    }

    iosX64() {
        mavenPublication {
            group = Configurations.groupId
            version = Configurations.cleanArchCoreVersion
        }
        
        binaries {
            framework {
                // Disable bitcode embedding for the simulator build.
                embedBitcode("disable")
            }
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation KotlinLibraries.stdlibCommon
            }
        }
        commonTest {
            dependencies {
                implementation KotlinLibraries.testCommon
                implementation KotlinLibraries.testAnnotationCommon
            }
        }
        jvmMain {
            dependencies {
                implementation KotlinLibraries.stdlibJdk8
            }
        }
        jvmTest {
            dependencies {
                implementation KotlinLibraries.testJvm
                implementation KotlinLibraries.testJunitJvm
            }
        }
        jsMain {
            dependencies {
                implementation KotlinLibraries.stdlibJs
            }
        }
        jsTest {
            dependencies {
                implementation KotlinLibraries.testJs
            }
        }
        nativeMain {
            dependsOn sourceSets.commonMain
        }
        macosX64Main {
            dependsOn sourceSets.nativeMain
        }
        iosArm64Main {
            dependsOn sourceSets.nativeMain
        }
        iosX64Main {
            dependsOn sourceSets.nativeMain
        }
        all {
            languageSettings {
                progressiveMode = true
            }
        }
    }

//    targets {
//        fromPreset(presets.jvm, 'jvm') {
//            // Configure a single target's compilations (main and test)
//            compilations.all {
//                tasks[compileKotlinTaskName].kotlinOptions {
//                    jvmTarget = '1.8'
//                }
//            }
//
//            mavenPublication {
//                group = Configurations.groupId
//                version = Configurations.cleanArchCoreVersion
//            }
//        }
//
//        fromPreset(presets.js, 'js') {
//            mavenPublication {
//                group = Configurations.groupId
//                version = Configurations.cleanArchCoreVersion
//            }
//        }
//        // For ARM, preset should be changed to presets.iosArm32 or presets.iosArm64
//        fromPreset(presets.iosX64, 'iosX64') {
//            mavenPublication {
//                group = Configurations.groupId
//                version = Configurations.cleanArchCoreVersion
//            }
//        }
//        fromPreset(presets.iosArm64, 'iosArm64') {
//            mavenPublication {
//                group = Configurations.groupId
//                version = Configurations.cleanArchCoreVersion
//            }
//        }
//        fromPreset(presets.macosX64, 'macosX64') {
//            mavenPublication {
//                group = Configurations.groupId
//                version = Configurations.cleanArchCoreVersion
//            }
//        }
//
//        // Configure all compilations of all targets:
////        all {
////            compilations.all {
////                tasks[compileKotlinTaskName].kotlinOptions {
////                    allWarningsAsErrors = true
////                }
////            }
////        }
//    }
//
//    configure([targets.iosX64, targets.iosArm64, targets.macosX64]) {
//        compilations.main.source(sourceSets.nativeMain)
//    }
}

dokka {
    impliedPlatforms = ["Common"] // This will force platform tags for all non-common sources e.g. "JVM"
    kotlinTasks {
        // dokka fails to retrieve sources from MPP-tasks so they must be set empty to avoid exception
        // use sourceRoot instead (see below)
        []
    }
    sourceRoot {
        // assuming there is only a single source dir...
        path = kotlin.sourceSets.commonMain.kotlin.srcDirs[0]
        platforms = ["common"]
    }
    if (kotlin.sourceSets.getNames().contains("jvmMain")) {
        sourceRoot {
            // assuming there is only a single source dir...
            path = kotlin.sourceSets.jvmMain.kotlin.srcDirs[0]
            platforms = ["jvm"]
        }
    }
    if (kotlin.sourceSets.getNames().contains("jsMain")) {
        sourceRoot {
            // assuming there is only a single source dir...
            path = kotlin.sourceSets.jsMain.kotlin.srcDirs[0]
            platforms = ["js"]
        }
    }
    if (kotlin.sourceSets.getNames().contains("nativeMain")) {
        sourceRoot {
            // assuming there is only a single source dir...
            path = kotlin.sourceSets.nativeMain.kotlin.srcDirs[0]
            platforms = ["native"]
        }
    }
}

task javadocsJar(type: Jar, dependsOn: dokka) {
    archiveClassifier = 'javadoc'
    from dokka.outputDirectory
}

publishing {
    publications.all {
        version = Configurations.cleanArchCoreVersion
        artifact javadocsJar

        pom.withXml {
            def root = asNode()

            // eliminate test-scoped dependencies (no need in maven central POMs)
            root.dependencies.removeAll { dep ->
                dep.scope == "test"
            }

            // add all items necessary for maven central publication
            root.children().last() + {
                resolveStrategy = Closure.DELEGATE_FIRST

                name Configurations.coreLibraryName
                description = Configurations.coreLibraryDescription
                url Configurations.cleanArchProjectUrl
                organization {
                    name "com.bitsydarel"
                    url Configurations.authorWebsite
                }
                issueManagement {
                    system "GitHub"
                    url Configurations.cleanArchProjectUrl + "/issues"
                }
                licenses {
                    license {
                        name Configurations.licenseName
                        url Configurations.licenseUrl
                        distribution "repo"
                    }
                }
                scm {
                    url Configurations.cleanArchProjectUrl
                    connection Configurations.cleanArchProjectUrl
                }
                developers {
                    developer {
                        id Configurations.authorId
                        name Configurations.authorName
                        email Configurations.authorEmail
                    }
                }
            }
        }

        final String nameOfTheArtifact = getArtifactId()

        if (nameOfTheArtifact.contains("jvm") || nameOfTheArtifact.contains("js")) {
            moduleDescriptorGenerator = null
        }
    }

    repositories {
        maven {
            url = Configurations.remoteMavenRepo
        }
    }
}

signing {
    sign(publishing.publications)
}

afterEvaluate {
    bintrayUpload.dependsOn publishToMavenLocal
}
