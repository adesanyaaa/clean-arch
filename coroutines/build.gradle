plugins {
    id 'kotlin-multiplatform'
    id("maven-publish")
    id("signing")
    id("com.github.johnrengelman.shadow") version("4.0.3")
}

group Configurations.groupId
version Configurations.cleanArchCoroutinesVersion

kotlin {
    jvm() {
        compilations.all {
            kotlinOptions {
                jvmTarget = '1.8'
            }
        }
    }

    js()
    // For ARM, should be changed to iosArm32 or iosArm64
    // For Linux, should be changed to e.g. linuxX64
    // For MacOS, should be changed to e.g. macosX64
    // For Windows, should be changed to e.g. mingwX64
    macosX64()

    iosArm64() {
        binaries {
            framework {
            }
        }
    }

    iosX64() {
        binaries {
            framework {
                // Disable bitcode embedding for the simulator build.
                embedBitcode("disable")
            }
        }
    }

    final String cleanArchVersion = "0.3"
    final String coroutinesVersion = "1.1.1"

    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation("com.bitsydarel.clean-arch:core-metadata:$cleanArchVersion")
                api("com.bitsydarel.clean-arch:core:$cleanArchVersion")
                api("org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutinesVersion")
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                api("com.bitsydarel.clean-arch:core-jvm:$cleanArchVersion")
                api("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion")
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
                api("com.bitsydarel.clean-arch:core-js:$cleanArchVersion")
                api("org.jetbrains.kotlinx:kotlinx-coroutines-core-js:$coroutinesVersion")
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }
        nativeMain {
            dependsOn sourceSets.commonMain
            dependencies {
                api("org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutinesVersion")
            }
        }
        macosX64Main {
            dependsOn sourceSets.nativeMain
            dependencies {
                api("com.bitsydarel.clean-arch:core-macosx64:$cleanArchVersion")
            }
        }
        iosArm64Main {
            dependsOn sourceSets.nativeMain
            dependencies {
                api("com.bitsydarel.clean-arch:core-iosarm64:$cleanArchVersion")
            }
        }
        iosX64Main {
            dependsOn sourceSets.nativeMain
            dependencies {
                api("com.bitsydarel.clean-arch:core-iosx64:$cleanArchVersion")
            }
        }
        all {
            languageSettings {
                progressiveMode = true
            }
        }
    }
}

dokka {
    impliedPlatforms = ["Common"] // This will force platform tags for all non-common sources e.g. "JVM"
    kotlinTasks {
        // dokka fails to retrieve sources from MPP-tasks so they must be set empty to avoid exception
        // use sourceRoot instead (see below)
        []
    }
    sourceRoot {
        // assuming there is only a single source dir...
        path = kotlin.sourceSets.commonMain.kotlin.srcDirs[0]
        platforms = ["common"]
    }
    if (kotlin.sourceSets.getNames().contains("jvmMain")) {
        sourceRoot {
            // assuming there is only a single source dir...
            path = kotlin.sourceSets.jvmMain.kotlin.srcDirs[0]
            platforms = ["jvm"]
        }
    }
    if (kotlin.sourceSets.getNames().contains("jsMain")) {
        sourceRoot {
            // assuming there is only a single source dir...
            path = kotlin.sourceSets.jsMain.kotlin.srcDirs[0]
            platforms = ["js"]
        }
    }
    if (kotlin.sourceSets.getNames().contains("nativeMain")) {
        sourceRoot {
            // assuming there is only a single source dir...
            path = kotlin.sourceSets.nativeMain.kotlin.srcDirs[0]
            platforms = ["native"]
        }
    }
}

task javadocsJar(type: Jar, dependsOn: dokka) {
    archiveClassifier = 'javadoc'
    from dokka.outputDirectory
}

publishing {
    publications.all {
        version = Configurations.cleanArchCoroutinesVersion
        artifact javadocsJar

        pom.withXml {
            def root = asNode()

            // eliminate test-scoped dependencies (no need in maven central POMs)
            root.dependencies.removeAll { dep ->
                dep.scope == "test"
            }

            // add all items necessary for maven central publication
            root.children().last() + {
                resolveStrategy = Closure.DELEGATE_FIRST

                name Configurations.coroutineLibraryName
                description = Configurations.coroutineLibraryDescription
                url Configurations.cleanArchProjectUrl
                organization {
                    name "com.bitsydarel"
                    url Configurations.authorWebsite
                }
                issueManagement {
                    system "GitHub"
                    url Configurations.cleanArchProjectUrl + "/issues"
                }
                licenses {
                    license {
                        name Configurations.licenseName
                        url Configurations.licenseUrl
                        distribution "repo"
                    }
                }
                scm {
                    url Configurations.cleanArchProjectUrl
                    connection Configurations.cleanArchProjectUrl
                }
                developers {
                    developer {
                        id Configurations.authorId
                        name Configurations.authorName
                        email Configurations.authorEmail
                    }
                }
            }
        }

        final String nameOfTheArtifact = getArtifactId()

        if (nameOfTheArtifact.contains("jvm") || nameOfTheArtifact.contains("js")) {
            moduleDescriptorGenerator = null
        }
    }

    repositories {
        maven {
            url = Configurations.remoteMavenRepo
        }
    }
}

signing {
    sign(publishing.publications)
}

afterEvaluate {
    bintrayUpload.dependsOn publishToMavenLocal
}
